/*!
 * jQuery Validation Plugin v1.19.0
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2018 JÃ¶rn Zaefferer
 * Released under the MIT license
 */ !function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof module && module.exports ? module.exports = a(require("jquery")) : a(jQuery) }(function ($) { $.extend($.fn, { validate: function (b) { if (!this.length) { b && b.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."); return } var a = $.data(this[0], "validator"); return a || (this.attr("novalidate", "novalidate"), a = new $.validator(b, this[0]), $.data(this[0], "validator", a), a.settings.onsubmit && (this.on("click.validate", ":submit", function (b) { a.submitButton = b.currentTarget, $(this).hasClass("cancel") && (a.cancelSubmit = !0), void 0 !== $(this).attr("formnovalidate") && (a.cancelSubmit = !0) }), this.on("submit.validate", function (c) { function b() { var b, d; return a.submitButton && (a.settings.submitHandler || a.formSubmitted) && (b = $("<input type='hidden'/>").attr("name", a.submitButton.name).val($(a.submitButton).val()).appendTo(a.currentForm)), !a.settings.submitHandler || !!a.settings.debug || (d = a.settings.submitHandler.call(a, a.currentForm, c), b && b.remove(), void 0 !== d && d) } return (a.settings.debug && c.preventDefault(), a.cancelSubmit) ? (a.cancelSubmit = !1, b()) : a.form() ? a.pendingRequest ? (a.formSubmitted = !0, !1) : b() : (a.focusInvalid(), !1) }))), a }, valid: function () { var a, b, c; return $(this[0]).is("form") ? a = this.validate().form() : (c = [], a = !0, b = $(this[0].form).validate(), this.each(function () { (a = b.element(this) && a) || (c = c.concat(b.errorList)) }), b.errorList = c), a }, rules: function (h, c) { var f, g, d, b, e, i, a = this[0], j = void 0 !== this.attr("contenteditable") && "false" !== this.attr("contenteditable"); if (null != a && (!a.form && j && (a.form = this.closest("form")[0], a.name = this.attr("name")), null != a.form)) { if (h) switch (g = (f = $.data(a.form, "validator").settings).rules, d = $.validator.staticRules(a), h) { case "add": $.extend(d, $.validator.normalizeRule(c)), delete d.messages, g[a.name] = d, c.messages && (f.messages[a.name] = $.extend(f.messages[a.name], c.messages)); break; case "remove": if (!c) return delete g[a.name], d; return i = {}, $.each(c.split(/\s/), function (b, a) { i[a] = d[a], delete d[a] }), i }return (b = $.validator.normalizeRules($.extend({}, $.validator.classRules(a), $.validator.attributeRules(a), $.validator.dataRules(a), $.validator.staticRules(a)), a)).required && (e = b.required, delete b.required, b = $.extend({ required: e }, b)), b.remote && (e = b.remote, delete b.remote, b = $.extend(b, { remote: e })), b } } }), $.extend($.expr.pseudos || $.expr[":"], { blank: function (a) { return !$.trim("" + $(a).val()) }, filled: function (b) { var a = $(b).val(); return null !== a && !!$.trim("" + a) }, unchecked: function (a) { return !$(a).prop("checked") } }), $.validator = function (a, b) { this.settings = $.extend(!0, {}, $.validator.defaults, a), this.currentForm = b, this.init() }, $.validator.format = function (b, a) { return 1 === arguments.length ? function () { var a = $.makeArray(arguments); return a.unshift(b), $.validator.format.apply(this, a) } : (void 0 === a || (arguments.length > 2 && a.constructor !== Array && (a = $.makeArray(arguments).slice(1)), a.constructor !== Array && (a = [a]), $.each(a, function (a, c) { b = b.replace(new RegExp("\\{" + a + "\\}", "g"), function () { return c }) })), b) }, $.extend($.validator, { defaults: { messages: {}, groups: {}, rules: {}, errorClass: "error", pendingClass: "pending", validClass: "valid", errorElement: "label", focusCleanup: !1, focusInvalid: !0, errorContainer: $([]), errorLabelContainer: $([]), onsubmit: !0, ignore: ":hidden", ignoreTitle: !1, onfocusin: function (a) { this.lastActive = a, this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass), this.hideThese(this.errorsFor(a))) }, onfocusout: function (a) { !this.checkable(a) && (a.name in this.submitted || !this.optional(a)) && this.element(a) }, onkeyup: function (a, b) { (9 !== b.which || "" !== this.elementValue(a)) && -1 === $.inArray(b.keyCode, [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225]) && (a.name in this.submitted || a.name in this.invalid) && this.element(a) }, onclick: function (a) { a.name in this.submitted ? this.element(a) : a.parentNode.name in this.submitted && this.element(a.parentNode) }, highlight: function (a, b, c) { "radio" === a.type ? this.findByName(a.name).addClass(b).removeClass(c) : $(a).addClass(b).removeClass(c) }, unhighlight: function (a, b, c) { "radio" === a.type ? this.findByName(a.name).removeClass(b).addClass(c) : $(a).removeClass(b).addClass(c) } }, setDefaults: function (a) { $.extend($.validator.defaults, a) }, messages: { required: "This field is required.", remote: "Please fix this field.", email: "Please enter a valid email address.", url: "Please enter a valid URL.", date: "Please enter a valid date.", dateISO: "Please enter a valid date (ISO).", number: "Please enter a valid number.", digits: "Please enter only digits.", equalTo: "Please enter the same value again.", maxlength: $.validator.format("Please enter no more than {0} characters."), minlength: $.validator.format("Please enter at least {0} characters."), rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."), range: $.validator.format("Please enter a value between {0} and {1}."), max: $.validator.format("Please enter a value less than or equal to {0}."), min: $.validator.format("Please enter a value greater than or equal to {0}."), step: $.validator.format("Please enter a multiple of {0}.") }, autoCreateRanges: !1, prototype: { init: function () { this.labelContainer = $(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm), this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset(); var a, c = this.currentForm, d = this.groups = {}; function b(b) { var f = void 0 !== $(this).attr("contenteditable") && "false" !== $(this).attr("contenteditable"); if (!this.form && f && (this.form = $(this).closest("form")[0], this.name = $(this).attr("name")), c === this.form) { var d = $.data(this.form, "validator"), e = "on" + b.type.replace(/^validate/, ""), a = d.settings; a[e] && !$(this).is(a.ignore) && a[e].call(d, this, b) } } $.each(this.settings.groups, function (b, a) { "string" == typeof a && (a = a.split(/\s/)), $.each(a, function (c, a) { d[a] = b }) }), a = this.settings.rules, $.each(a, function (b, c) { a[b] = $.validator.normalizeRule(c) }), $(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']", b).on("click.validate", "select, option, [type='radio'], [type='checkbox']", b), this.settings.invalidHandler && $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler) }, form: function () { return this.checkForm(), $.extend(this.submitted, this.errorMap), this.invalid = $.extend({}, this.errorMap), this.valid() || $(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid() }, checkForm: function () { this.prepareForm(); for (var a = 0, b = this.currentElements = this.elements(); b[a]; a++)this.check(b[a]); return this.valid() }, element: function (d) { var b, f, e = this.clean(d), a = this.validationTargetFor(e), g = this, c = !0; return void 0 === a ? delete this.invalid[e.name] : (this.prepareElement(a), this.currentElements = $(a), (f = this.groups[a.name]) && $.each(this.groups, function (b, d) { d === f && b !== a.name && (e = g.validationTargetFor(g.clean(g.findByName(b)))) && e.name in g.invalid && (g.currentElements.push(e), c = g.check(e) && c) }), b = !1 !== this.check(a), c = c && b, b ? this.invalid[a.name] = !1 : this.invalid[a.name] = !0, this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), $(d).attr("aria-invalid", !b)), c }, showErrors: function (a) { if (a) { var b = this; $.extend(this.errorMap, a), this.errorList = $.map(this.errorMap, function (a, c) { return { message: a, element: b.findByName(c)[0] } }), this.successList = $.grep(this.successList, function (b) { return !(b.name in a) }) } this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors() }, resetForm: function () { $.fn.resetForm && $(this.currentForm).resetForm(), this.invalid = {}, this.submitted = {}, this.prepareForm(), this.hideErrors(); var a = this.elements().removeData("previousValue").removeAttr("aria-invalid"); this.resetElements(a) }, resetElements: function (b) { var a; if (this.settings.unhighlight) for (a = 0; b[a]; a++)this.settings.unhighlight.call(this, b[a], this.settings.errorClass, ""), this.findByName(b[a].name).removeClass(this.settings.validClass); else b.removeClass(this.settings.errorClass).removeClass(this.settings.validClass) }, numberOfInvalids: function () { return this.objectLength(this.invalid) }, objectLength: function (a) { var b, c = 0; for (b in a) void 0 !== a[b] && null !== a[b] && !1 !== a[b] && c++; return c }, hideErrors: function () { this.hideThese(this.toHide) }, hideThese: function (a) { a.not(this.containers).text(""), this.addWrapper(a).hide() }, valid: function () { return 0 === this.size() }, size: function () { return this.errorList.length }, focusInvalid: function () { if (this.settings.focusInvalid) try { $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin") } catch (a) { } }, findLastActive: function () { var a = this.lastActive; return a && 1 === $.grep(this.errorList, function (b) { return b.element.name === a.name }).length && a }, elements: function () { var a = this, b = {}; return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () { var c = this.name || $(this).attr("name"), d = void 0 !== $(this).attr("contenteditable") && "false" !== $(this).attr("contenteditable"); return !c && a.settings.debug && window.console && console.error("%o has no name assigned", this), d && (this.form = $(this).closest("form")[0], this.name = c), this.form === a.currentForm && !(c in b) && !!a.objectLength($(this).rules()) && (b[c] = !0, !0) }) }, clean: function (a) { return $(a)[0] }, errors: function () { var a = this.settings.errorClass.split(" ").join("."); return $(this.settings.errorElement + "." + a, this.errorContext) }, resetInternals: function () { this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = $([]), this.toHide = $([]) }, reset: function () { this.resetInternals(), this.currentElements = $([]) }, prepareForm: function () { this.reset(), this.toHide = this.errors().add(this.containers) }, prepareElement: function (a) { this.reset(), this.toHide = this.errorsFor(a) }, elementValue: function (b) { var a, e, c = $(b), d = b.type, f = void 0 !== c.attr("contenteditable") && "false" !== c.attr("contenteditable"); return "radio" === d || "checkbox" === d ? this.findByName(b.name).filter(":checked").val() : "number" === d && void 0 !== b.validity ? b.validity.badInput ? "NaN" : c.val() : (a = f ? c.text() : c.val(), "file" === d) ? "C:\\fakepath\\" === a.substr(0, 12) ? a.substr(12) : (e = a.lastIndexOf("/")) >= 0 || (e = a.lastIndexOf("\\")) >= 0 ? a.substr(e + 1) : a : "string" == typeof a ? a.replace(/\r/g, "") : a }, check: function (a) { a = this.validationTargetFor(this.clean(a)); var d, e, c, f, b = $(a).rules(), j = $.map(b, function (b, a) { return a }).length, h = !1, i = this.elementValue(a); for (e in "function" == typeof b.normalizer ? f = b.normalizer : "function" == typeof this.settings.normalizer && (f = this.settings.normalizer), f && (i = f.call(a, i), delete b.normalizer), b) { c = { method: e, parameters: b[e] }; try { if (d = $.validator.methods[e].call(this, i, a, c.parameters), "dependency-mismatch" === d && 1 === j) { h = !0; continue } if (h = !1, "pending" === d) { this.toHide = this.toHide.not(this.errorsFor(a)); return } if (!d) return this.formatAndAdd(a, c), !1 } catch (g) { throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + a.id + ", check the '" + c.method + "' method.", g), g instanceof TypeError && (g.message += ".  Exception occurred when checking element " + a.id + ", check the '" + c.method + "' method."), g } } if (!h) return this.objectLength(b) && this.successList.push(a), !0 }, customDataMessage: function (a, b) { return $(a).data("msg" + b.charAt(0).toUpperCase() + b.substring(1).toLowerCase()) || $(a).data("msg") }, customMessage: function (b, c) { var a = this.settings.messages[b]; return a && (a.constructor === String ? a : a[c]) }, findDefined: function () { for (var a = 0; a < arguments.length; a++)if (void 0 !== arguments[a]) return arguments[a] }, defaultMessage: function (c, a) { "string" == typeof a && (a = { method: a }); var b = this.findDefined(this.customMessage(c.name, a.method), this.customDataMessage(c, a.method), !this.settings.ignoreTitle && c.title || void 0, $.validator.messages[a.method], "<strong>Warning: No message defined for " + c.name + "</strong>"), d = /\$?\{(\d+)\}/g; return "function" == typeof b ? b = b.call(this, a.parameters, c) : d.test(b) && (b = $.validator.format(b.replace(d, "{$1}"), a.parameters)), b }, formatAndAdd: function (a, c) { var b = this.defaultMessage(a, c); this.errorList.push({ message: b, element: a, method: c.method }), this.errorMap[a.name] = b, this.submitted[a.name] = b }, addWrapper: function (a) { return this.settings.wrapper && (a = a.add(a.parent(this.settings.wrapper))), a }, defaultShowErrors: function () { var a, c, b; for (a = 0; this.errorList[a]; a++)b = this.errorList[a], this.settings.highlight && this.settings.highlight.call(this, b.element, this.settings.errorClass, this.settings.validClass), this.showLabel(b.element, b.message); if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (a = 0; this.successList[a]; a++)this.showLabel(this.successList[a]); if (this.settings.unhighlight) for (a = 0, c = this.validElements(); c[a]; a++)this.settings.unhighlight.call(this, c[a], this.settings.errorClass, this.settings.validClass); this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show() }, validElements: function () { return this.currentElements.not(this.invalidElements()) }, invalidElements: function () { return $(this.errorList).map(function () { return this.element }) }, showLabel: function (b, f) { var c, i, e, h, a = this.errorsFor(b), g = this.idOrName(b), d = $(b).attr("aria-describedby"); a.length ? (a.removeClass(this.settings.validClass).addClass(this.settings.errorClass), a.html(f)) : (c = a = $("<" + this.settings.errorElement + ">").attr("id", g + "-error").addClass(this.settings.errorClass).html(f || ""), this.settings.wrapper && (c = a.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.length ? this.labelContainer.append(c) : this.settings.errorPlacement ? this.settings.errorPlacement.call(this, c, $(b)) : c.insertAfter(b), a.is("label") ? a.attr("for", g) : 0 === a.parents("label[for='" + this.escapeCssMeta(g) + "']").length && (e = a.attr("id"), d ? d.match(new RegExp("\\b" + this.escapeCssMeta(e) + "\\b")) || (d += " " + e) : d = e, $(b).attr("aria-describedby", d), (i = this.groups[b.name]) && (h = this, $.each(h.groups, function (b, c) { c === i && $("[name='" + h.escapeCssMeta(b) + "']", h.currentForm).attr("aria-describedby", a.attr("id")) })))), !f && this.settings.success && (a.text(""), "string" == typeof this.settings.success ? a.addClass(this.settings.success) : this.settings.success(a, b)), this.toShow = this.toShow.add(a) }, errorsFor: function (b) { var c = this.escapeCssMeta(this.idOrName(b)), d = $(b).attr("aria-describedby"), a = "label[for='" + c + "'], label[for='" + c + "'] *"; return d && (a = a + ", #" + this.escapeCssMeta(d).replace(/\s+/g, ", #")), this.errors().filter(a) }, escapeCssMeta: function (a) { return a.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1") }, idOrName: function (a) { return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name) }, validationTargetFor: function (a) { return this.checkable(a) && (a = this.findByName(a.name)), $(a).not(this.settings.ignore)[0] }, checkable: function (a) { return /radio|checkbox/i.test(a.type) }, findByName: function (a) { return $(this.currentForm).find("[name='" + this.escapeCssMeta(a) + "']") }, getLength: function (b, a) { switch (a.nodeName.toLowerCase()) { case "select": return $("option:selected", a).length; case "input": if (this.checkable(a)) return this.findByName(a.name).filter(":checked").length }return b.length }, depend: function (a, b) { return !this.dependTypes[typeof a] || this.dependTypes[typeof a](a, b) }, dependTypes: { boolean: function (a) { return a }, string: function (a, b) { return !!$(a, b.form).length }, function: function (a, b) { return a(b) } }, optional: function (a) { var b = this.elementValue(a); return !$.validator.methods.required.call(this, b, a) && "dependency-mismatch" }, startRequest: function (a) { this.pending[a.name] || (this.pendingRequest++, $(a).addClass(this.settings.pendingClass), this.pending[a.name] = !0) }, stopRequest: function (a, b) { this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[a.name], $(a).removeClass(this.settings.pendingClass), b && 0 === this.pendingRequest && this.formSubmitted && this.form() ? ($(this.currentForm).submit(), this.submitButton && $("input:hidden[name='" + this.submitButton.name + "']", this.currentForm).remove(), this.formSubmitted = !1) : !b && 0 === this.pendingRequest && this.formSubmitted && ($(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1) }, previousValue: function (b, a) { return a = "string" == typeof a && a || "remote", $.data(b, "previousValue") || $.data(b, "previousValue", { old: null, valid: !0, message: this.defaultMessage(b, { method: a }) }) }, destroy: function () { this.resetForm(), $(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur") } }, classRuleSettings: { required: { required: !0 }, email: { email: !0 }, url: { url: !0 }, date: { date: !0 }, dateISO: { dateISO: !0 }, number: { number: !0 }, digits: { digits: !0 }, creditcard: { creditcard: !0 } }, addClassRules: function (a, b) { a.constructor === String ? this.classRuleSettings[a] = b : $.extend(this.classRuleSettings, a) }, classRules: function (b) { var c = {}, a = $(b).attr("class"); return a && $.each(a.split(" "), function () { this in $.validator.classRuleSettings && $.extend(c, $.validator.classRuleSettings[this]) }), c }, normalizeAttributeRule: function (d, b, c, a) { /min|max|step/.test(c) && (null === b || /number|range|text/.test(b)) && isNaN(a = Number(a)) && (a = void 0), a || 0 === a ? d[c] = a : b === c && "range" !== b && (d[c] = !0) }, attributeRules: function (d) { var b, a, c = {}, e = $(d), f = d.getAttribute("type"); for (b in $.validator.methods) "required" === b ? ("" === (a = d.getAttribute(b)) && (a = !0), a = !!a) : a = e.attr(b), this.normalizeAttributeRule(c, f, b, a); return c.maxlength && /-1|2147483647|524288/.test(c.maxlength) && delete c.maxlength, c }, dataRules: function (c) { var a, b, d = {}, e = $(c), f = c.getAttribute("type"); for (a in $.validator.methods) "" === (b = e.data("rule" + a.charAt(0).toUpperCase() + a.substring(1).toLowerCase())) && (b = !0), this.normalizeAttributeRule(d, f, a, b); return d }, staticRules: function (a) { var b = {}, c = $.data(a.form, "validator"); return c.settings.rules && (b = $.validator.normalizeRule(c.settings.rules[a.name]) || {}), b }, normalizeRules: function (a, b) { return $.each(a, function (d, c) { if (!1 === c) { delete a[d]; return } if (c.param || c.depends) { var e = !0; switch (typeof c.depends) { case "string": e = !!$(c.depends, b.form).length; break; case "function": e = c.depends.call(b, b) }e ? a[d] = void 0 === c.param || c.param : ($.data(b.form, "validator").resetElements($(b)), delete a[d]) } }), $.each(a, function (d, c) { a[d] = $.isFunction(c) && "normalizer" !== d ? c(b) : c }), $.each(["minlength", "maxlength"], function () { a[this] && (a[this] = Number(a[this])) }), $.each(["rangelength", "range"], function () { var b; a[this] && ($.isArray(a[this]) ? a[this] = [Number(a[this][0]), Number(a[this][1])] : "string" == typeof a[this] && (b = a[this].replace(/[\[\]]/g, "").split(/[\s,]+/), a[this] = [Number(b[0]), Number(b[1])])) }), $.validator.autoCreateRanges && (null != a.min && null != a.max && (a.range = [a.min, a.max], delete a.min, delete a.max), null != a.minlength && null != a.maxlength && (a.rangelength = [a.minlength, a.maxlength], delete a.minlength, delete a.maxlength)), a }, normalizeRule: function (a) { if ("string" == typeof a) { var b = {}; $.each(a.split(/\s/), function () { b[this] = !0 }), a = b } return a }, addMethod: function (a, b, c) { $.validator.methods[a] = b, $.validator.messages[a] = void 0 !== c ? c : $.validator.messages[a], b.length < 3 && $.validator.addClassRules(a, $.validator.normalizeRule(a)) }, methods: { required: function (b, a, d) { if (!this.depend(d, a)) return "dependency-mismatch"; if ("select" === a.nodeName.toLowerCase()) { var c = $(a).val(); return c && c.length > 0 } return this.checkable(a) ? this.getLength(b, a) > 0 : null != b && b.length > 0 }, email: function (a, b) { return this.optional(b) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a) }, url: function (a, b) { return this.optional(b) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a) }, date: (b = !1, function (a, c) { return !b && (b = !0, this.settings.debug && window.console && console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")), this.optional(c) || !/Invalid|NaN/.test(new Date(a).toString()) }), dateISO: function (a, b) { return this.optional(b) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a) }, number: function (a, b) { return this.optional(b) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a) }, digits: function (a, b) { return this.optional(b) || /^\d+$/.test(a) }, minlength: function (a, b, c) { var d = $.isArray(a) ? a.length : this.getLength(a, b); return this.optional(b) || d >= c }, maxlength: function (a, b, c) { var d = $.isArray(a) ? a.length : this.getLength(a, b); return this.optional(b) || d <= c }, rangelength: function (a, b, c) { var d = $.isArray(a) ? a.length : this.getLength(a, b); return this.optional(b) || d >= c[0] && d <= c[1] }, min: function (a, b, c) { return this.optional(b) || a >= c }, max: function (a, b, c) { return this.optional(b) || a <= c }, range: function (a, c, b) { return this.optional(c) || a >= b[0] && a <= b[1] }, step: function (b, c, d) { var e, a = $(c).attr("type"), i = new RegExp("\\b" + a + "\\b"), j = a && !i.test("text,number,range"), f = function (b) { var a = ("" + b).match(/(?:\.(\d+))?$/); return a && a[1] ? a[1].length : 0 }, g = function (a) { return Math.round(a * Math.pow(10, e)) }, h = !0; if (j) throw new Error("Step attribute on input type " + a + " is not supported."); return e = f(d), (f(b) > e || g(b) % g(d) != 0) && (h = !1), this.optional(c) || h }, equalTo: function (b, d, c) { var a = $(c); return this.settings.onfocusout && a.not(".validate-equalTo-blur").length && a.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () { $(d).valid() }), b === a.val() }, remote: function (f, a, b, c) { if (this.optional(a)) return "dependency-mismatch"; c = "string" == typeof c && c || "remote"; var g, h, e, d = this.previousValue(a, c); return (this.settings.messages[a.name] || (this.settings.messages[a.name] = {}), d.originalMessage = d.originalMessage || this.settings.messages[a.name][c], this.settings.messages[a.name][c] = d.message, b = "string" == typeof b && { url: b } || b, e = $.param($.extend({ data: f }, b.data)), d.old === e) ? d.valid : (d.old = e, g = this, this.startRequest(a), (h = {})[a.name] = f, $.ajax($.extend(!0, { mode: "abort", port: "validate" + a.name, dataType: "json", data: h, context: g.currentForm, success: function (b) { var e, i, j, h = !0 === b || "true" === b; g.settings.messages[a.name][c] = d.originalMessage, h ? (j = g.formSubmitted, g.resetInternals(), g.toHide = g.errorsFor(a), g.formSubmitted = j, g.successList.push(a), g.invalid[a.name] = !1, g.showErrors()) : (e = {}, i = b || g.defaultMessage(a, { method: c, parameters: f }), e[a.name] = d.message = i, g.invalid[a.name] = !0, g.showErrors(e)), d.valid = h, g.stopRequest(a, h) } }, b)), "pending") } } }); var b, a, c = {}; return $.ajaxPrefilter ? $.ajaxPrefilter(function (b, _, d) { var a = b.port; "abort" === b.mode && (c[a] && c[a].abort(), c[a] = d) }) : (a = $.ajax, $.ajax = function (b) { var e = ("mode" in b ? b : $.ajaxSettings).mode, d = ("port" in b ? b : $.ajaxSettings).port; return "abort" === e ? (c[d] && c[d].abort(), c[d] = a.apply(this, arguments), c[d]) : a.apply(this, arguments) }), $ })